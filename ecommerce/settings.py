"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
#Con este módulo que instalamos en el entorno virtual podemos mejorar la seguridad del proyecto
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#El SECRET_KEY viene del archivo .env en la raíz del proyecto
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#El DEBUG viene del archivo .env en la raíz del proyecto, con cast indicamos el tipo de dato que retorna
DEBUG = config('DEBUG', cast = bool, default = True)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Las aplicaciones creadas para el proyecto son las siguientes:
    #Category: permite la gestión de las categorías de productos las cuales actúan como filtro
    'category',
    #Accounts: esta app gestiona a los usuarios (comunes y admin)
    'accounts',
    #Store: gestiona todo lo realtivo a la tienda
    'store',
    #Carts: gestiona todo lo relativo al carrito de compras
    'carts',
    #Orders: gestiona todo lo relativo a las órdenes de compra
    'orders',
    #admin_honeypot es una app creada en base a el paquete django-admin-honeypot es una
    #pantalla de inicio de sesión de administrador de Django falsa para registrar y notificar
    # a los administradores sobre intentos de acceso no autorizado. Se instala con pip install django-admin-honeypot
    'admin_honeypot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #Con este middleware que instalamos con pip install django-session-timeout programamos un tiempo después del cual la
    #sesión se cierra automáticamente si el usuario permanece inactivo
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
]

#Seteamos el tiempo en segundos que la sesión permanecer abierta con el usuario inactivo
SESSION_EXPIRE_SECONDS = 3600
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_TIMEOUT_REDIRECT = 'accounts/login'

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #Dentro del directorio templates se encuentran todos los archivos html necesario para el proyecto
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #Processors nuestros
                'category.context_processors.menu_links',
                'carts.context_processors.counter',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

#Elegimos nuestro modelo de autorización, el cual está definido por la app accounts con su clase Account dentro del archivo models.py
AUTH_USER_MODEL = 'accounts.Account'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

#Configuramos la url para los archivos estáticos
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_DIRS = [
    'ecommerce/static'
]

#Configuramos la url para los archivos de media
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR /'media'

#Mensajes Personalizados
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR : 'danger'
}

#Usamos el servidor de gmail para enviar el correo electrónico porque de gmail es el mail del superadmin
#Por seguridad, estos datos sensibles se encuentran en un archivo .env en la raíz del proyecto al cual git ignora según está definido en el archivo .gitignore
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast = int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast = bool, default = True)


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
